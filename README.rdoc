= Resque Director

Resque Director is a plugin for the Resque queueing system (http://github.com/defunkt/resque) that "directs" workers on a queue by automatically adding or removing workers from a queue based on how backed up a queue becomes, or how long it takes for a job to get pulled off the queue.

==About

resque-director is mainly useful for when you are managing a large number of workers and don't want to waste resources keeping all of them waiting when they are not being used. Also useful in queues where the influx of jobs can change dramatically from time to time: enabling more workers during the times when the queue is filling up more quickly, and less in the opposite scenario. Different queues can be given different directions as well.

== Usage

When creating your jobs you should extend Resque::Plugins::Director and add direction options. 

For Example:
	
  class Job
    extend Resque::Plugins::Director
    direct :min_workers => 2, :max_workers => 4, :max_time => 60, :max_queue => 10, :wait_time => 30
    @queue = :test
    
    #rest of your Job class here
  end
  

=== Configuration Options

<b>min_workers</b>:: specifies the minimum number of workers running at any point in time. If there are no workers running or less than the minimum running it will start as many workers necessary to get it to the minimum. The default is 1.

<b>max_workers</b>:: specifies the maximum number of workers running at any point in time. It will never start more than the maximum number of workers. If anything less than or equal to zero is specified as the maximum it will be treated as if there is no maximum, and theoretically an infinite number of workers could be added. The default is 0.

<b>max_time</b>:: the maximum time in seconds that a job takes to get pulled off the queue, if a job takes longer than this time then a worker is added. If anything less than or equal to zero is specified as the maximum time, this field will be ignored. The default is 0.

<b>max_queue</b>:: the maximum jobs that can build up in a queue, if more than this number of jobs build up then a worker is added. If anything less than or equal to zero is specified as the maximum queue, this field will be ignored. The default is 0.

<b>wait_time</b>:: the time that it will wait after adding or removing a worker before being allowed to add or remove workers again. The default is 60 seconds.

===	Starting Workers

By default the starting of a worker is accomplished by running 
  "QUEUE=queue_name rake resque:work"
Where "queue_name" is whatever queue the job is running on

However, you can also set command vars that will be used to start a worker 
For Example:
	
  class Job
    extend Resque::Plugins::Director
    direct :vars => "VERBOSE=1 PIDFILE=pid", :rake_path => "usr/bin/rake", :env => true, :run_path => "/path/to/run/in"
    @queue = :test
    
    #rest of your Job class here
  end

This would run the command: 
  "cd /path/to/run/in" && VERBOSE=1 PIDFILE=pid QUEUE=test usr/bin/rake environment resque:work"

There is also the option to override the entire command with that of your choice using:
	
  class Job
    extend Resque::Plugins::Director
    direct :command_override => "command to run goes here"
    @queue = :test
    
    #rest of your Job class here
  end


This will run exactly what you put in the command override to start a worker (ignoring any other command vars you have set), allowing you to customize the starting of a worker fully.

=== Removing Workers

A worker will be removed if the jobs in the queue fall below half of the <b>max_queue</b>, or if the time it takes for a job to be pulled off of a queue falls below half of the <b>max_time</b>.

=== Special Cases

* If a max_worker is less than min_worker then the default for max_worker will be used (there will be no maximum). 
* If a min_workers is set to anything less than 1 then it will be treated as 0.


== Contributing to resque-reconnect
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 Nolan Frausto. See LICENSE.txt for
further details.

